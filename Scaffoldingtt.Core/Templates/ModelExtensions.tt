<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="base.tt"#>
<#@ output extension=".cs"#><#

var textTransform = DynamicTextTransformation.Create(this); 
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile)) 
{
    return string.Empty;
}

WriteHeader(codeStringGenerator, fileManager); 

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection)) 
{
    fileManager.StartNewFile(entity.Name + "EntityExtensionT.cs");
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false)#>
<#
        BeginNamespace(code);
#>
public static partial class ModelExtensions 
{
<#
    var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(entity);
    var collectionNavigationProperties = typeMapper.GetCollectionNavigationProperties(entity);
    var complexProperties = typeMapper.GetComplexProperties(entity);


#>
    public static <#=code.Escape(entity)#> CloneEntitySimple(this <#=code.Escape(entity)#> model)
    {
		if (model == null)
			return null;

        var clonedModel = new <#=code.Escape(entity)#>
		{
<#
    var simpleProperties = typeMapper.GetSimpleProperties(entity, codeStringGenerator.GetEntityExcludedProperites(entity.Name));
    if (simpleProperties.Any())
    {
        foreach (var edmProperty in simpleProperties)
        {
#>
            <#=codeStringGenerator.ExtensionProperty(edmProperty)#>
<#
        }
    }

#>
		};

		return clonedModel;
    }

    public static <#=code.Escape(entity)#> ToEntitySimple(this <#=code.Escape(entity)#>ViewModel model)
    {
		if (model == null)
			return null;

        var entity = new <#=code.Escape(entity)#>
		{
<#
    if (simpleProperties.Any())
    {
        foreach (var edmProperty in simpleProperties)
        {
#>
            <#=codeStringGenerator.ExtensionProperty(edmProperty)#>
<#
        }
    }

#>

		};

		return entity;
    }
 
    public static <#=code.Escape(entity)#>ViewModel ToViewModelSimple(this <#=code.Escape(entity)#> model)
    {
		if (model == null)
			return null;

        var viewModel = new <#=code.Escape(entity)#>ViewModel
		{
<#
    if (simpleProperties.Any())
    {
        foreach (var edmProperty in simpleProperties)
        {
#>
            <#=codeStringGenerator.ExtensionProperty(edmProperty)#>
<#
        }
    }

#>

		};

		return viewModel;
    }

    public static <#=code.Escape(entity)#>ViewModel ToViewModelBase(this <#=code.Escape(entity)#> model)  
    {
		if (model == null)
			return null;

        var viewModel = model.ToViewModelSimple(); 
<# 
    var navigationProperties = typeMapper.GetNavigationProperties(entity);

    if (navigationProperties.Any())
    {
#>
<#
        foreach (var navigationProperty in navigationProperties)
        { 
#>
			<#=codeStringGenerator.NavigationPropertyToViewModel(navigationProperty)#> 
<#
        }
    }
#>
		return viewModel;
    }

}
<#
    EndNamespace(code);
}

foreach (var complex in typeMapper.GetItemsToGenerate<ComplexType>(itemCollection))
{
    fileManager.StartNewFile(complex.Name + ".cs");
    BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false, includeCollections: false)#>
<#=Accessibility.ForType(complex)#> partial class <#=code.Escape(complex)#>
{
<#
    var complexProperties = typeMapper.GetComplexProperties(complex);
    var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(complex);

    if (propertiesWithDefaultValues.Any() || complexProperties.Any())
    {
#>
    public <#=code.Escape(complex)#>()
    {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
        this.<#=code.Escape(edmProperty)#> = <#=typeMapper.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }

        foreach (var complexProperty in complexProperties)
        {
#>
        this.<#=code.Escape(complexProperty)#> = new <#=typeMapper.GetTypeName(complexProperty.TypeUsage)#>();
<#
        }
#>
    }

<#
    }

    var simpleProperties = typeMapper.GetSimpleProperties(complex);
    if (simpleProperties.Any())
    {
        foreach(var edmProperty in simpleProperties)
        {
#>
    <#=codeStringGenerator.Property(edmProperty)#>
<#
        }
    }


    if (complexProperties.Any())
    {
#>

<#
        foreach(var edmProperty in complexProperties) 
        {
#>
    <#=codeStringGenerator.Property(edmProperty)#>
<#
        }
    }
#>
}
<#
    EndNamespace(code);
}

foreach (var enumType in typeMapper.GetEnumItemsToGenerate(itemCollection))
{
    fileManager.StartNewFile(enumType.Name + ".cs");
    BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false, includeCollections: false)#>
<#
    if (typeMapper.EnumIsFlags(enumType))
    {
#>
[Flags]
<#
    }
#>
<#=codeStringGenerator.EnumOpening(enumType)#>
{
<#
    var foundOne = false; 
    
    foreach (MetadataItem member in typeMapper.GetEnumMembers(enumType))
    {
        foundOne = true;
#>
    <#=code.Escape(typeMapper.GetEnumMemberName(member))#> = <#=typeMapper.GetEnumMemberValue(member)#>,
<#
    }

    if (foundOne)
    {
        this.GenerationEnvironment.Remove(this.GenerationEnvironment.Length - 3, 1);
    }
#>
}
<#
    EndNamespace(code);
}

    fileManager.Process(CodeStringGenerator.ViewModelPath,"EntityExtensionT.cs");

#>
<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#+
    fileManager.EndBlock();
}

public void BeginNamespace(CodeGenerationTools code) 
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
using <#=CodeStringGenerator.Domain1Namespace#>;
using <#=CodeStringGenerator.ProjectNamespace#>.Models;
namespace <#=CodeStringGenerator.ProjectNamespace#>.Models.Extensions
{
<#+
        PushIndent("    ");
    }

}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
        PopIndent();
#>
}
<#+
    }
}

#>