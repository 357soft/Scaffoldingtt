<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="base.tt"#><#@ 
 output extension=".txt"#><#

var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this); 
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile); 
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile)) 
{
    return string.Empty;
}

#>
    <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Data<span class="caret"></span></a>
        <ul class="dropdown-menu" role="menu">
<#

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
#>
                    <li>@Html.ActionLink("<#=entity.Name#>", "<#=entity.Name#>IndexT", "<#=entity.Name#>")</li>
<#
}
#>
        </ul>
    </li>

    children.Add().Text("Furniture").Items(innerChildren =>{
<#

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
#>
                    innerChildren.Add().Text("<#=entity.Name#>").Action("<#=entity.Name#>IndexT", "<#=entity.Name#>");
<#
}
#>
    });
<#



#>
<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
@*//------------------------------------------------------------------------------
// <auto-generated>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------*@

<#=codeStringGenerator.UsingDirectives(inHeader: true)#>
<#+
    fileManager.EndBlock();
}

public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
        PushIndent("    ");
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
        PopIndent();
#>
}
<#+
    }
}


#>