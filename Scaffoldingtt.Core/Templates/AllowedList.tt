<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="base.tt"#><#@ 
 output extension=".txt"#><#

var textTransform = DynamicTextTransformation.Create(this); 
var code = new CodeGenerationTools(this); 
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}

#>
        public AllowedClass[] AllowedArray1 = new AllowedClass[] {
<#

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
    var simpleProperties = typeMapper.GetSimpleProperties(entity);
    var navigationProperties = typeMapper.GetNavigationProperties(entity);

#>
//<#=codeStringGenerator.AllSimplePropertiesString(simpleProperties)#>
            new AllowedClass(){ EntityName = "<#=entity.Name#>",ExcludeProperties = new string[]{"",""},
                PropertyId = "Id",PropertyName = "Name",
                NavigationProperties = new Dictionary<string,string>(){
<#
    if (navigationProperties.Any())
    {
        foreach (var navigationProperty in navigationProperties)
        {
            if(navigationProperty.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many)
            {
#>
			        {"<#=code.Escape(navigationProperty)#>Id","<#=code.Escape(navigationProperty)#>"}, 
<#
            }
        }
    }
            
#>
                },
            },
<#
}
#>
        };

<#



#>
<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
@*//------------------------------------------------------------------------------
// <auto-generated>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------*@

<#=codeStringGenerator.UsingDirectives(inHeader: true)#>
<#+
    fileManager.EndBlock();
}

public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
        PushIndent("    ");
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
        PopIndent();
#>
}
<#+
    }
}


#>