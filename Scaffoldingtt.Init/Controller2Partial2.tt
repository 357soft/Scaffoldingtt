<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="..\CodeGenerator.Core\Templates\base.tt"#>
<#@ output extension=".txt"#><#

var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this); 
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();

//const 


if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile)) 
{
    return string.Empty;  
}

WriteHeader(codeStringGenerator, fileManager);


foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))  
{
        if(!codeStringGenerator.GenerateAll)
        {
        var founditem= codeStringGenerator.Allowed(entity.Name); 

        if(!founditem)
            continue;
        }

        var dbsetproperty = codeStringGenerator.GetDbSetProperty(container,entity);

        var simpleProperties = typeMapper.GetSimpleProperties(entity, codeStringGenerator.GetEntityExcludedProperites(entity.Name));
		var navigationProperties = typeMapper.GetNavigationProperties(entity);

        var allowedclass = codeStringGenerator.GetAllowedClass(entity.Name);
        var id = "Id";
        var name = "Name";
        if(allowedclass != null)
        {
            id = allowedclass.PropertyId;
            name = allowedclass.PropertyName;
        }


        fileManager.StartNewFile(code.Escape(entity) + "Controller.cs");
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false)#>  
<#
        BeginNamespace(code);
#>

<#=codeStringGenerator.ControllerClassOpeningPartial2(entity)#> 
{
    //for keyword search like combobox or autocomplete search
    public ActionResult <#=code.Escape(entity)#>Filter_Read([DataSourceRequest]DataSourceRequest request, Criteria<#=code.Escape(entity)#> criteria)
    {
        var keyword = Request.QueryString["filter[filters][0][value]"];

        if (!string.IsNullOrEmpty(keyword))
		{
			IEnumerable<<#=code.Escape(entity)#>> entities = _<#=code.Escape(entity)#>Service.Search(keyword);
			DataSourceResult result = entities.ToDataSourceResult(request, entity => entity.ToViewModel());

			return Json(result, JsonRequestBehavior.AllowGet);
		}
		return <#=code.Escape(entity)#>_Read(request, criteria);
    }

    //Read for criteria query and return anonymous objects
    public ActionResult <#=code.Escape(entity)#>_Read([DataSourceRequest]DataSourceRequest request, Criteria<#=code.Escape(entity)#> criteria) 
    {
        IEnumerable<<#=code.Escape(entity)#>> entities = _<#=code.Escape(entity)#>Service.Get(criteria);
        DataSourceResult result = entities.ToDataSourceResult(request, entity => new { 

<#
    if (simpleProperties.Any())
    {
        foreach (var edmProperty in simpleProperties)
        {
#>
            <#=codeStringGenerator.ObjectFactory(edmProperty)#>
<#
        }
    }

	    
    if (navigationProperties.Any())
    {
#>
<#
        foreach (var navigationProperty in navigationProperties)
        { 
#>
			<#=codeStringGenerator.NavigationPropertyToViewModelSimple(navigationProperty)#> 
<#
        }
    }
#>
            });

        return Json(result, JsonRequestBehavior.AllowGet); 
    }

}
<#

        EndNamespace(code); 

}


    fileManager.Process(CodeStringGenerator.ControllerPath, ""); 
	

#>
<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader(); 
#>
//------------------------------------------------------------------------------  
// <auto-generated>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------   

<#+
    fileManager.EndBlock();
}

public void BeginNamespace(CodeGenerationTools code) 
{
    var codeNamespace = code.VsNamespaceSuggestion();  
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Ewe.Mvc.Extensions;
using Ewe.Mvc.UI;
using Ewe.Infrastructure.Specification;
using Ewe.Mvc.Infrastructure;
using <#=CodeStringGenerator.Domain1Namespace#>;
using <#=CodeStringGenerator.ServiceNamespace#>;
using <#=CodeStringGenerator.ProjectNamespace#>.Models.Extensions; 
using <#=CodeStringGenerator.ProjectNamespace#>.Models; 

namespace <#=CodeStringGenerator.WebControllerNamespace#>
{
<#+
        PushIndent("    ");
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
        PopIndent();
#>
}
<#+
    }
}


#>