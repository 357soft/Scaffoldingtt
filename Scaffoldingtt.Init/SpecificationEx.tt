<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="..\CodeGenerator.Core\Templates\base.tt"#><#@ 
 output extension=".txt"#><#

var textTransform = DynamicTextTransformation.Create(this); 
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this); 
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();

//const


if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty; 
}

    

WriteHeader(codeStringGenerator, fileManager); 


foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection)) 
{
        if(!codeStringGenerator.GenerateAll)
        {
        var founditem= codeStringGenerator.Allowed(entity.Name);

        if(!founditem)
            continue;
        }

        var dbsetproperty = code.Escape(entity);

        var simpleProperties = typeMapper.GetSimpleProperties(entity, codeStringGenerator.GetEntityExcludedProperites(entity.Name)); 
		var navigationProperties = typeMapper.GetNavigationProperties(entity);

        foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
        {
            if(typeMapper.GetTypeName(entitySet.ElementType) == code.Escape(entity))
                dbsetproperty = code.Escape(entitySet);
        }


        fileManager.StartNewFile(code.Escape(entity) + "SpecificationEx.cs");
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false)#>
<#
        BeginNamespace(code);
#>

<#=codeStringGenerator.SpecificationClassOpening(entity)#>
{

    public static ISpecification<<#=code.Escape(entity)#>> <#=code.Escape(entity)#>CriteriaEx(Specification<<#=code.Escape(entity)#>> specification, Criteria<#=code.Escape(entity)#> criteria)
    {
        return specification;
    }

    public static ISpecification<<#=code.Escape(entity)#>> <#=code.Escape(entity)#>SearchCriteriaEx(Specification<<#=code.Escape(entity)#>> specification, Criteria<#=code.Escape(entity)#> criteria)
    {
        return specification;
    }


}

    public partial class Criteria<#=code.Escape(entity)#> 
    {

    }


    

<#
        EndNamespace(code);

}

    fileManager.Process(CodeStringGenerator.ServicePath,"SpecificationEx.cs");

#>
<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager) 
{
    fileManager.StartHeader(); 
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------ 

<#+
    fileManager.EndBlock();
}

public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
using System.Linq;
using System.Text;
using Ewe.Infrastructure.Specification;
using <#=CodeStringGenerator.Domain1Namespace#>;

namespace <#=CodeStringGenerator.ServiceNamespace#>
{
<#+
        PushIndent("    ");
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
        PopIndent();
#>
}
<#+
    }
}


#>